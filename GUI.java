/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Heiko
 */
import java.io.*;
import java.net.*;
import java.security.Key;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;



public final class GUI extends javax.swing.JFrame implements Runnable {
    
//Globale Variablen einführen    
  DataOutputStream out;
  DataInputStream in; 
  Socket s;   
  InetAddress ip;   
  String ClientName;
  AES aes;

    /**
     * Creates new form GUI
     * @throws java.lang.Exception
     */
    public GUI() throws  Exception {
        initComponents();
        verbinden();
        aes = new AES();
        
        // Die Funktion SchlüsselInDatei darf nur einmal ausgeführt werden von einem Client, der andere benötigt dann den selben Schlüssel
        // aes.SchlüsselInDatei();
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        Anzeige = new javax.swing.JTextArea();
        Senden = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Eingabefeld = new javax.swing.JTextArea();
        Verbinden = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Anzeige.setEditable(false);
        Anzeige.setColumns(20);
        Anzeige.setRows(50);
        jScrollPane1.setViewportView(Anzeige);

        Senden.setText("Senden");
        Senden.setEnabled(false);
        Senden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendenActionPerformed(evt);
            }
        });

        Eingabefeld.setColumns(20);
        Eingabefeld.setRows(1);
        jScrollPane3.setViewportView(Eingabefeld);

        Verbinden.setText("Verbinden");
        Verbinden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerbindenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Verbinden)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Senden)
                        .addContainerGap(423, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Senden)
                    .addComponent(Verbinden))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendenActionPerformed
        //Wenn Senden gedrückt wird, inhalt von Eingabefeld an Server schicken 
        try {
           
           out.writeUTF(aes.verschlüsseln(aes.SchlüsselAusDatei(), Eingabefeld.getText()));
           Anzeige.append("Ich: " +Eingabefeld.getText()+ "\n" );
           Eingabefeld.setText("");
       } catch (Exception ex) {
       }
        
    }//GEN-LAST:event_SendenActionPerformed

    private void VerbindenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerbindenActionPerformed
               
      try {
          //IP Adresse und dazugehörige MAC abfragen. Senden an Server
          ip = InetAddress.getLocalHost();
          NetworkInterface network = NetworkInterface.getByInetAddress(ip);
          byte [] mac = network.getHardwareAddress();
          out.writeUTF(""+mac);
      } catch (IOException ex) {
      }
            
    // Namen-Eingabe wird gespeichert in globale Variable und sendet an Server
            ClientName =Eingabefeld.getText();
            Eingabefeld.setText("");
      try {
            out.writeUTF(ClientName);
      } catch (IOException ex) {
      }
      
    //Senden Button aktivieren
      Senden.setEnabled(rootPaneCheckingEnabled);
      
    //Neuen Thread zum hören starten
      new Thread(this).start();
      
    //Verbinden Button deaktivieren
      Verbinden.setEnabled(false);
        
    }//GEN-LAST:event_VerbindenActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new GUI().setVisible(true);
                } catch (IOException ex) {
                } catch (Exception ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Anzeige;
    private javax.swing.JTextArea Eingabefeld;
    private javax.swing.JButton Senden;
    private javax.swing.JButton Verbinden;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

//Methode verbinden, intiialisiert und verbindet mit Server + sendet benötigte Daten

public void verbinden() throws IOException{
     Anzeige.append("Verbindung wird aufgebaut..\n");
        try {
   // Neuen Socket aufbauen auf Localhost und Port 8080
            s = new Socket ("wwi12-02.dhbw-heidenheim.de" , 80);
            Anzeige.append("Erfolgreich verbunden mit: " +s +"\n");
   // Neuen OutputStream erstellen für Socket s         
            out = new DataOutputStream(s.getOutputStream());
            
   //Nutzernamen Eingabe fordern
            Anzeige.append("Benutzernamen eingeben und 'Verbinden' drücken! \n");
            
        } catch (IOException ex) {
            Anzeige.setText("Verbindung fehlgeschlagen! \nServer nicht gefunden! Bitte neustarten!");     
                }
    
     
    }

    @Override
    public void run() {
   
       // System.out.println("bin da");
      //Endlosschleife zum abhören was der Server sedent. Neuen InputStream erzeugen und in Anzeigefenster ausgeben
        while(true){
    
        try {
           in = new DataInputStream(s.getInputStream());

            String lesen = in.readUTF();
        
//Gibt die Nachricht die verschlüsselt vom Server kommt, entschlüsselt aus!
            Anzeige.append("Server: "  + aes.entschlüsseln(aes.SchlüsselAusDatei(), lesen) + "\n");

        } catch (Exception ex) {
        }
    
    }
    
    }

public void WerIstON(){
    


}
    
//Ab hier die Klasse zur AES Verschlüsselung
public final class AES {
    
    public AES() throws Exception{
         // SchlüsselInDatei();
         
         
}

public final void SchlüsselInDatei() throws Exception{
        // Datei erzeugen
    File datei = new File("AES.key");

    // Schlüssel erzeugen
    KeyGenerator keygen = KeyGenerator.getInstance("AES");
    keygen.init(128);
    Key key = keygen.generateKey();

    // Schlüssel in die Datei schreiben
    byte[] bytes = key.getEncoded();
    FileOutputStream keyfos = new FileOutputStream(datei);
    keyfos.write(bytes);
    keyfos.close();
    
    
    
    


}
public final SecretKey SchlüsselAusDatei() throws Exception{
        //Datei
       File datei = new File("AES.key");

       // Key lesen
       FileInputStream fis = new FileInputStream(datei);
       byte[] encodedKey = new byte[(int) datei.length()];
       fis.read(encodedKey);
       fis.close();
       
       // generiere Key
       SecretKey key = new SecretKeySpec(encodedKey, "AES");     
       
       return(key);
       


}
public String verschlüsseln(SecretKey key, String nachricht) throws Exception{
    

    // Verschluesseln
    Cipher cipher = Cipher.getInstance("AES");
    cipher.init(Cipher.ENCRYPT_MODE, key);
    byte[] encrypted = cipher.doFinal(nachricht.getBytes());

    // bytes zu Base64-String konvertieren (dient der Lesbarkeit)
    BASE64Encoder myEncoder = new BASE64Encoder();
    String geheim = myEncoder.encode(encrypted);

    // Ergebnis
       return(geheim);

}
public String entschlüsseln(SecretKey key, String nachricht) throws Exception{
    // BASE64 String zu Byte-Array konvertieren
    BASE64Decoder myDecoder2 = new BASE64Decoder();
    byte[] crypted2 = myDecoder2.decodeBuffer(nachricht);

    // Entschluesseln
    Cipher cipher2 = Cipher.getInstance("AES");
    cipher2.init(Cipher.DECRYPT_MODE, key);
    byte[] cipherData2 = cipher2.doFinal(crypted2);
    String erg = new String(cipherData2);

    // Klartext
    return(erg);

}

   
    
}
}
