
import java.io.*;
import java.net.*;
import java.rmi.*;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Heiko
 */
public class ClientGui extends javax.swing.JFrame implements Runnable {

    //Deklaration verschiedener Variablen
    private Socket s;
    private DataInputStream in;
    private TestRemote remote;
    private Thread thread;
    private int schleife =0;
    private AES aes;
    
    
    /**
     * Creates new form ClientGui
     * @throws java.rmi.RemoteException
     * @throws java.rmi.NotBoundException
     */
    //Konstruktor
    public ClientGui() throws RemoteException, NotBoundException, Exception {
        // Layout initiieren
        initComponents();
        
        //Verbindung aufbauen zum Registry um mittels RMI Methodenaufrufe zu starten.
        Registry registry =LocateRegistry.getRegistry("localhost", 2222);
        //Anlegenen eines TestRemotes Objektes um auf die Methoden zugreifen zu können.
        remote= (TestRemote) registry.lookup("remote");
        System.out.println(remote.isLoginValid("heiko"));
        //AES Objekt erzeugen um auf die Methoden der Klasse zuzugreifen zu können.
        aes = new AES();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Anzeigefeld = new javax.swing.JTextArea();
        Eingabefeld = new javax.swing.JTextField();
        Senden = new javax.swing.JButton();
        Verbinden = new javax.swing.JButton();
        UserName = new javax.swing.JTextField();
        Trennen = new javax.swing.JButton();
        UserListe = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Anzeigefeld.setEditable(false);
        Anzeigefeld.setColumns(20);
        Anzeigefeld.setRows(5);
        jScrollPane1.setViewportView(Anzeigefeld);

        Senden.setText("Senden");
        Senden.setEnabled(false);
        Senden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendenActionPerformed(evt);
            }
        });

        Verbinden.setText("Verbinden");
        Verbinden.setEnabled(false);
        Verbinden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerbindenActionPerformed(evt);
            }
        });

        UserName.setText("Name eingeben...");
        UserName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserNameMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UserNameMouseEntered(evt);
            }
        });
        UserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameActionPerformed(evt);
            }
        });
        UserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UserNameKeyPressed(evt);
            }
        });

        Trennen.setText("Trennen");
        Trennen.setEnabled(false);
        Trennen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrennenActionPerformed(evt);
            }
        });

        UserListe.setMinimumSize(new java.awt.Dimension(123, 168));
        UserListe.setPreferredSize(new java.awt.Dimension(123, 168));
        UserListe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UserListeMouseEntered(evt);
            }
        });
        UserListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserListeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Eingabefeld, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Senden, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserName, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Verbinden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Trennen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UserListe, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserListe, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Eingabefeld, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(UserName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Senden)
                    .addComponent(Verbinden))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Trennen)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Aufruf bei drücken von "Senden"
    private void SendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendenActionPerformed
       
        try {
    //Wenn Senden gedrückt wird, inhalt von Eingabefeld an Server schicken, den Stringn davor mittels AES verschlüsseln
            remote.senden(aes.verschlüsseln(aes.SchlüsselAusDatei(), Eingabefeld.getText()), UserName.getText());
        } catch (RemoteException ex) {
           
        } catch (Exception ex) {
        }
           //Anzeigefeld.append("Ich: " +Eingabefeld.getText()+ "\n" );
           Eingabefeld.setText("");
       
    }//GEN-LAST:event_SendenActionPerformed

    private void UserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_UserNameActionPerformed
    
    //Aufruf bei drücken von "Verbinden"
    private void VerbindenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerbindenActionPerformed
        Anzeigefeld.append("Verbindung wird aufgebaut..\n");
            //Variable um den Thread bei Aufruf von "Trennen" anzuhalten und wieder zu starten. 1 heißt verbunden, 0 heißt getrennt
            schleife=1;
        
            //Usernamen-Feld darf nicht leer sein, ansonsten Aufforderung!
            if(!UserName.getText().equals("")){
            //Aufruf der Methode verbinden des Servers, übermittelt den Nutzernamen 
            try {
                remote.verbinden(UserName.getText());
            } catch (RemoteException ex) {
                
            }
            }else {
            Anzeigefeld.append("Bitte einen Nutzernamen eingeben!" +"\n");
            }
       try {
   // Neuen Socket aufbauen auf Localhost und Port 8080, je nach dem wo Server läuft!
            s = new Socket ("localhost" , 8080);
            Anzeigefeld.append("Erfolgreich verbunden mit: " +s +"\n");
                      
        } catch (IOException ex) {
            Anzeigefeld.setText("Verbindung fehlgeschlagen! \nServer nicht gefunden! Bitte neustarten!");     
                }
       
            // Verschiedene Buttons sperren bzw. freigeben
             Senden.setEnabled(true);
             Verbinden.setEnabled(false);
             Trennen.setEnabled(true);
             UserName.setEnabled(false);
             
             // neuen Thread starten, um ständig auf Nachrichten zu warten und onlineListe zu überprüfen.
             thread =  new Thread(this);
             thread.start();             
    }//GEN-LAST:event_VerbindenActionPerformed

    private void UserNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UserNameKeyPressed
        
    }//GEN-LAST:event_UserNameKeyPressed

    private void UserNameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserNameMouseEntered
        
    }//GEN-LAST:event_UserNameMouseEntered

    private void UserNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserNameMouseClicked
       //Bei click in das UserNamen-Feld dieses Frei machen und Verbinden-Button verfügbarmachen. Aber nur wenn getrennt ist!
        if (schleife==0){
            UserName.setText("");
            Verbinden.setEnabled(true);
       }
    }//GEN-LAST:event_UserNameMouseClicked

    // Trennen-Button drücken:
    private void TrennenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrennenActionPerformed
        
        // Socket schließen
        try {
            s.close();
        } catch (IOException ex) {
            Anzeigefeld.append("Kann nicht geschlossen werden.. +\n");
        }
        
        // Trennen vom Server aufrufen, um User aus der Liste zu löschen
        try {
            remote.trennen(UserName.getText());
        } catch (RemoteException ex) {
            System.out.println(ex);
            }
        
        // Verschiedene Buttones sperren oder freigeben
        Verbinden.setEnabled(true);
        Trennen.setEnabled(false);
        UserName.setEnabled(true);
        // Zustand sagt getrennt!
        schleife=0;
       
        
    }//GEN-LAST:event_TrennenActionPerformed

    private void UserListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserListeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserListeActionPerformed

    private void UserListeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserListeMouseEntered
        try {
            online(remote.online());
        } catch (RemoteException ex) {
        }
    }//GEN-LAST:event_UserListeMouseEntered

    /**
     * @param args the command line arguments
     * @throws java.rmi.RemoteException
     * @throws java.rmi.NotBoundException
     */
    public static void main(String args[]) throws RemoteException, NotBoundException {
        /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ClientGui().setVisible(true);
                } catch (RemoteException | NotBoundException ex) {
                    Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Anzeigefeld;
    private javax.swing.JTextField Eingabefeld;
    private javax.swing.JButton Senden;
    private javax.swing.JButton Trennen;
    private java.awt.List UserListe;
    private javax.swing.JTextField UserName;
    private javax.swing.JButton Verbinden;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    // Methode run die bei Aufruf des Threads gestartet wird
    public void run() {
        //Endlosschleife zum abhören was der Server sedent. Neuen InputStream erzeugen und in Anzeigefenster ausgeben
        while(schleife == 1){
    
        try {
           // Methode online gibt die Nutzernamen der online-verfügabaren Usern zurück vom Server. Die eigene Methode schriebt diese in die UserListe. 
           online(remote.online());
           in = new DataInputStream(s.getInputStream());

            String lesen = in.readUTF();
        

            // Trennt den Einkommenden String am ":" um Username von der Nachricht zu trennen
            String [] nachrichten = lesen.split(":");
            
            // Gibt die Nachricht die verschlüsselt vom Server kommt, entschlüsselt aus!
            Anzeigefeld.append(nachrichten[0] + ": "+  aes.entschlüsseln(aes.SchlüsselAusDatei(), nachrichten[1])+   "\n");

        } catch (IOException ex) {
        }   catch (Exception ex) {
            }
    }
}
    //Methode die die Usernamen in die UserListe anhängt. Sie nimmt eine ArrayList entgegen und durchläuft diese einzeln in einer For-Schleife
    public void online (ArrayList users) throws RemoteException{
        String i;
        UserListe.removeAll();
        for(int a=0; a<users.size(); a++){
            
        i=  users.get(a).toString();
        UserListe.add(i);
        }
        
    
    }

     // Methode zum erzeugen der RSA keys. Schreibt öffentlichen und privaten Schlüssel in Datei
public static void generateKey() throws NoSuchAlgorithmException
{
    try {
    //Erstellen von Files für das Speichern der Schlüssel
        File priv = new File("priv.key");
        File publ = new File("publ.key");
    //Erzeugt das Schlüsselpaar mittels RSA
        KeyPairGenerator pairgen = KeyPairGenerator.getInstance("RSA");
        SecureRandom random = new SecureRandom();
        pairgen.initialize(512, random);
        KeyPair keyPair = pairgen.generateKeyPair();
    //öffnet OutputStream zum Schreiben in Datei und holt mittels getPublic den öffentlichen Schlüssel.
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(publ));
        out.writeObject(keyPair.getPublic());
        out.close();
    //öffnet OutputStream und mittels getPrivate den privaten Schlüssel um ihn in Datei zu schreiben.    
        out = new ObjectOutputStream(new FileOutputStream(priv));
        out.writeObject(keyPair.getPrivate());
        out.close();
    } catch (IOException | GeneralSecurityException e) {
        
    }
}   
    
   
//Ab hier die Klasse zur AES Verschlüsselung
public final class AES {
    
    public AES() throws Exception{
         //SchlüsselInDatei();
         
         
}

public final void SchlüsselInDatei() throws Exception{
        // Datei erzeugen
    File datei = new File("AES.key");

    // Schlüssel erzeugen
    KeyGenerator keygen = KeyGenerator.getInstance("AES");
    keygen.init(128);
    Key key = keygen.generateKey();

    // Schlüssel in die Datei schreiben
    byte[] bytes = key.getEncoded();
    FileOutputStream keyfos = new FileOutputStream(datei);
    keyfos.write(bytes);
    keyfos.close();
    
    
    
    


}
public final SecretKey SchlüsselAusDatei() throws Exception{
        //Datei
       File datei = new File("AES.key");

       // Key lesen
       FileInputStream fis = new FileInputStream(datei);
       byte[] encodedKey = new byte[(int) datei.length()];
       fis.read(encodedKey);
       fis.close();
       
       // generiere Key
       SecretKey key = new SecretKeySpec(encodedKey, "AES");     
       
       return(key);
       


}
public String verschlüsseln(SecretKey key, String nachricht) throws Exception{
    

    // Verschluesseln
    Cipher cipher = Cipher.getInstance("AES");
    cipher.init(Cipher.ENCRYPT_MODE, key);
    byte[] encrypted = cipher.doFinal(nachricht.getBytes());

    // bytes zu Base64-String konvertieren (dient der Lesbarkeit)
    BASE64Encoder myEncoder = new BASE64Encoder();
    String geheim = myEncoder.encode(encrypted);

    // Ergebnis
       return(geheim);

}
public String entschlüsseln(SecretKey key, String nachricht) throws Exception{
    // BASE64 String zu Byte-Array konvertieren
    BASE64Decoder myDecoder2 = new BASE64Decoder();
    byte[] crypted2 = myDecoder2.decodeBuffer(nachricht);

    // Entschluesseln
    Cipher cipher2 = Cipher.getInstance("AES");
    cipher2.init(Cipher.DECRYPT_MODE, key);
    byte[] cipherData2 = cipher2.doFinal(crypted2);
    String erg = new String(cipherData2);

    // Klartext
    return(erg);

}

   
    
}    
    
    

}
